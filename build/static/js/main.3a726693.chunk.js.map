{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","baseURL","phoneBookService","getAll","axios","get","then","response","data","catch","error","alert","message","create","newObject","post","update","id","put","Notification","className","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","map","i","find","noteObject","changedNote","returnedNote","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","date","Date","Math","random","concat","value","onChange","target","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3a726693.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({note, toggleImportance}) => {\r\n  const label = note.important ? \"make not important\" : \"make important\"\r\n\r\n\r\n  return (\r\n    <li>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\nconst baseURL = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    //assign the promise to request and call the then method\r\n  const request = axios.get(baseURL)\r\n  return request.then(response => response.data)\r\n  .catch(error => alert(error.message));\r\n    /*\r\n    return request.then(response => {\r\n        return response.data\r\n    })\r\n    */\r\n\r\n    //return axios.get(baseURL)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseURL, newObject)\r\n    return request.then(response => response.data)\r\n\r\n    //return axios.post(baseURL, newObject)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseURL}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n    //return axios.put(`${baseURL}/${id}`, newObject)\r\n}\r\n\r\nconst phoneBookService = {\r\n    getAll: getAll,\r\n    create: create,\r\n    update: update,\r\n    //keys and variables (defined within module)\r\n    \r\n    /*\r\n    getAll, create, update\r\n    */\r\n}\r\nexport default phoneBookService;","import React from 'react';\r\n\r\nconst Notification = ({message}) => {\r\n    /* \r\n    error message that was displayed when the user \r\n    tried to toggle the importance of a deleted note\r\n     with the alert method\r\n     */\r\n    if (message === null) {\r\n        //If the value of the message prop is null, \r\n        //then nothing is rendered to the screen\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Notification","import React from 'react'\r\n\r\nconst Footer = () => {\r\n    const footerStyle = {\r\n        color: 'green',\r\n        fontStyle: 'italic',\r\n        fontSize: 16\r\n    }\r\n\r\n    return (\r\n        <div style={footerStyle}>\r\n            <br/>\r\n            <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import './App.css';\n\nimport React, { useState, useEffect } from 'react'\n\nimport Note from \"./components/Note\"\nimport noteService from \"./services/notes\"\nimport Notification from \"./components/Notification\"\nimport Footer from \"./components/Footer\"\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  //filter important notes state\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n    }, [])\n    \n    /*\n    console.log(\"effect\")\n    axios\n      .get('http://localhost:3001/posts')\n      .then(response => { //this is the event handler\n        console.log(\"promise fulfilled\")\n        setNotes(response.data) //triggers a re-render of the component\n      })\n      }, []) //when the [] changes, update\n  */\n\n\n  /*\n  const hook = () => {\n  console.log('effect')\n  axios\n    .get('http://localhost:3001/notes')\n    .then(response => {\n      console.log('promise fulfilled')\n      setNotes(response.data)\n      })\n  }\n\n  useEffect(hook, [])\n  */\n\n  console.log('render', notes.length, 'notes')\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date(),\n      important: Math.random() < 0.5,\n    }\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n    /*\n    axios\n      .post('http://localhost:3001/posts', noteObject)\n      .then(response => {\n        setNotes(notes.concat(response.data))\n        setNewNote('')\n      })\n      */\n  }\n\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  //if state for filter is true, show all notes, if false only show importants\n  const notesToShow = showAll\n  ? notes\n  : notes.filter(note => note.important)\n\n\n  const toggleImportanceOf = (id) => {\n    // defines the unique url for each note resource based on its id\n    //const url = `http://localhost:3001/posts/${id}`\n    //find the note we want to modify, and we then assign it to the note variable\n    const note = notes.find(noteObject => noteObject.id === id)\n    \n    //create a new object from the copy of the old note object\n    //note is a reference to an item in the notes array in the component's state\n    //negate the important property value\n    //changed note is a shallow copy meaning that the values of the \n    //new object are the same as the values of the old object\n    const changedNote = {...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed`\n        )\n        //show descriptive error message for 5 seconds\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        //deleted note gets filtered out of state\n        //returns new array of notes that id all match ids in the server\n        setNotes(notes.filter(noteObject => noteObject.id !== id))\n      })\n    /*\n    //replace entire old object\n    // sets the component's notes state to a new array that contains all the \n    //items from the previous notes array(changed Not), except for the old note which is \n    //replaced by the updated version of it returned by the server:\n    axios.put(url, changedNote).then(response => {\n      \n      //creates a new array by mapping every item from the old array into an item in the new array\n      //If true we simply copy the item from the old array into the new array\n      // if false, the note object returned by the server is added to the array instead\n      setNotes(notes.map(note => note.id !== id ? note : response.data))\n    })\n    */\n  \n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage}/>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>   \n      <ul>\n        {notesToShow.map((note, i) => \n            <Note \n              key={i} \n              note={note}\n              toggleImportance={() => toggleImportanceOf(note.id)} />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>  \n     <Footer />\n    </div>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"./styles/index.css\"\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n/*\naxios\n  .get('http://localhost:3001/posts')\n  .then(response => {\n  const notes = response.data\n  console.log(notes)\n})\n\naxios.get('http://localhost:3001/comments').then(response => {\n  const data = response.data\n  console.log(data)\n})\n */\nreportWebVitals();\n"],"sourceRoot":""}